---
- hosts: servers
  name: "Basic user creation function checks"
  remote_user: root
  vars_files:
    - vars/all.yml

  pre_tasks:
    # Only required if target host does not have sudo installed.
    - name: Create fake sudoers directory
      file:
        dest: "{{ usermake_sudoer_dir }}"
        state: directory

  roles:
    - role: user-make
      usermake_ssh_key_download: false
      usermake_users: "{{ first_user_group }}"

    - role: user-make
      # We want make sure `usermake_ssh_key_download` works
      usermake_ssh_key_download: true
      usermake_users: "{{ second_user_group }}"

  tasks:
    # Checking on Alpha
    # Should not have a key pair
    - name: "Ensure Alpha exists and is a regular user (uid >= 1000)"
      getent:
        database: passwd
        key: alpha
      register: alphas_entity
      failed_when: alphas_entity.ansible_facts.getent_passwd['alpha'][1] | int < 1000

    - name: "Check Alpha's SSH key was *not* generated"
      stat:
        path: /home/alpha/.ssh/id_rsa
      become: yes
      register: alphaskey
      failed_when: alphaskey.stat.islnk is defined

    # Checking on Bravo
    # Should have a key pair
    # Key should have been downloaded
    - name: "Ensure Bravo exists and is a regular user (uid >= 1000)"
      getent:
        database: passwd
        key: bravo
      register: bravos_entity
      failed_when: bravos_entity.ansible_facts.getent_passwd['bravo'][1] | int < 1000
    - name: Ensure Bravo's SSH key was generated
      stat:
        path: /home/bravo/.ssh/id_rsa
      become: yes
      register: bravoskey
      failed_when: bravoskey.stat.islnk is not defined
    - name: "Ensure Bravo's public key was downloaded"
      local_action:
        module: stat
        path: "{{ usermake_ssh_key_download_dir + '/bravo@' + ansible_hostname + '.pub' }}"
      register: bravoscollectedkey
      failed_when: bravoscollectedkey.stat.islnk is not defined

    # Checking on Charlie
    - name: "Ensure Charlie exists and is a system user"
      getent:
        database: passwd
        key: charlie
      register: charlies_entity
      # Charlie's not a system user but it should (uid < 1000 yet it is {{charlies_entity.ansible_facts.getent_passwd['charlie'][1]}})"
      failed_when: charlies_entity.ansible_facts.getent_passwd['charlie'][1] | int >= 1000
    - name: "Ensure Charlie's SSH key was not generated"
      stat:
        path: /home/charlie/.ssh/id_rsa
      become: yes
      register: charlieskey
      # Charlie's public key exists (but it should not)
      failed_when: charlieskey.stat.islnk is defined

    # Checking on Delta
    - name: "Ensure Delta exists and is a regular user (uid >= 1000)"
      getent:
        database: passwd
        key: delta
      register: deltas_entity
      failed_when: deltas_entity.ansible_facts.getent_passwd['delta'][1] | int < 1000
    - name: "Ensure Delta's SSH key was generated"
      stat:
        path: /home/delta/.ssh/id_rsa
      become: yes
      register: deltaskey
      failed_when: deltaskey.stat.islnk is not defined

    # Checking on Foxtrot
    - name: "Ensure Foxtrot's public key was downloaded (it should have been)"
      local_action:
        module: stat
        path: "{{ usermake_ssh_key_download_dir + '/foxtrot@' + ansible_hostname + '.pub' }}"
      register: foxtrotcollectedkey
      failed_when: foxtrotcollectedkey.stat.islnk is not defined

    # Checking on Golf
    - name: "Golf's public key was downloaded (it should not have been)"
      local_action:
        module: stat
        path: "{{ usermake_ssh_key_download_dir + '/golf@' + ansible_hostname + '.pub' }}"
      register: golfcollectedkey
      failed_when: golfcollectedkey.stat.islnk is defined

    # Checking on Hotel
    - name: "Hotel should have a sudoer file"
      stat:
        path: "{{ usermake_sudoer_dir }}/hotel"
      become: true
      register: hotelsudoerfile
      failed_when: hotelsudoerfile is not success

    # Checking on India
    - name: "India should have a sudoer file"
      lineinfile:
        path: "{{ usermake_sudoer_dir }}/india"
        regexp: ".*NOPASSWD:.*"
        line: "india ALL=(ALL) NOPASSWD:ALL"
      check_mode: yes
      become: true
      register: indiasudoerfile
      failed_when: indiasudoerfile is not success or indiasudoerfile is changed


- import_playbook: "key-upload.yml"
  tags:
    - all
    - key-upload


- import_playbook: "key-download.yml"
  tags:
    - all
    - key-download


##
#  This second play is just to clean-up the target host
##
- hosts: servers
  name: "Clean-up"
  remote_user: root
  vars_files:
    - vars/all.yml

  pre_tasks:
    # First group with explicit remove value
    - name: "Update tests fixtures to tests removal"
      set_fact:
        "{{ item.0 | combine( {'state': item.1, 'remove': true} ) }}"
      register: first_user_group
      loop: "{{ first_user_group|product(['absent'])|list }}"

    - name: "Update tests fixtures to tests deletion"
      set_fact:
        "{{ item.0 | combine( {'state': item.1} ) }}"
      register: second_user_group
      loop: "{{ second_user_group|product(['absent'])|list }}"

  roles:
    # Actually removes the created user and as a bonus ensure role
    # does not fail when a user has been deleted
    - role: "user-make"
      usermake_users: "{{ first_user_group.results | map(attribute='ansible_facts._raw_params') | list }}"

    - role: "user-make"
      # Second group has no explicit `remove` value, we check `usermake_remove` override works
      usermake_remove: true
      usermake_users: "{{ second_user_group.results | map(attribute='ansible_facts._raw_params') | list }}"

  tasks:
    - name: "Clean-up downloaded keys directory"
      local_action:
        module: file
        path: "{{ usermake_ssh_key_download_dir }}"
        state: absent


# vim: syntax=yaml:et:ts=2:sw=4:
